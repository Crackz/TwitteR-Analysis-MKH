shiny::runApp()
remove.packages("httr", lib="~/R/win-library/3.3")
devtools::install_github("Crackz/httr")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Crackz/httr")
shiny::runApp()
devtools::install_github("Crackz/httr")
devtools::install_github("Crackz/httr" , force= TRUE)
runApp()
pwd
cd ..
shiny::runApp()
runApp()
library(shiny) runApp()
json
New<- jsonlite::fromJSON("ShapeCountries/countries-master/dist/countries.json")
New<- jsonlite::fromJSON("ShapeCountries/countries-master/dist/countries.json")
New<- jsonlite::fromJSON("ShapeCountries/countries-master/dist/countries.json")
New<- jsonlite::fromJSON("ShapeCountries/countries-master/dist/countries.json",T,flatten = T)
`countries(1)` <- read.csv(file="C:/Users/Maz/AppData/Local/Temp/countries(1).csv.utf8", header=TRUE, row.names=NULL, encoding="UTF-8", sep=";", dec=".", quote="\"", comment.char="")
availableLanaguages <- read.csv("ShapeCountries/CountriesLanguages.csv", stringsAsFactors = FALSE)
availableLanaguages <- read.csv("ShapeCountries/CountriesLanguages.csv", stringsAsFactors = FALSE)
str
availableLanaguages <- read.csv("ShapeCountries/language-codes.csv", stringsAsFactors = FALSE)
availableLanaguages <- read.csv("ShapeCountries/CountriesLanguages.csv", stringsAsFactors = FALSE)
availableLanaguagesCodes <- read.csv("ShapeCountries/language-codes.csv", stringsAsFactors = FALSE)
install
install.packages('sqldf')
dddddddddd<- sqldf::sqldf('SELECT * FROM availableLanguages w, availableLanguagesCodes b WHERE w.lang_abbr == b.alpha2')
dddddddddd<- sqldf::sqldf('SELECT * FROM availableLanaguages w, availableLanaguagesCodes b WHERE w.lang_abbr == b.alpha2')
library(st)
library(stringr)
aa<- str_extract(availableLanaguages['lang_abbr'],'\w{2}')
aa<- str_extract(availableLanaguages['lang_abbr'],'[a-z]{2}')
aa<- str_extract_all(availableLanaguages['lang_abbr'],'[a-z]{2}')
aa<- str_extract_all(availableLanaguages['lang_abbr'],'\\w{2}')
aa<- str_extract(availableLanaguages['lang_abbr'],'\\w{2}')
aa<- str_extract(availableLanaguages['lang_abbr'],'[a-z]{2}')
aa <- str_match_all(availableLanaguages['lang_abbr'], '[a-z]{2}')
aa <- str_match_all(availableLanaguages['lang_abbr'],'[a-z]{2}')
aa <- str_match_all(availableLanaguages['lang_abbr'],'[a-z]{2}')
aa <- paste0(str_match_all(availableLanaguages['lang_abbr'],'[a-z]{2}'))
aa <- str_match_all(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match_all(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'][2],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'][1],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'][2],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'][3],'[a-z]{2}')
str_match(,'[a-z]{2}')
availableLanaguages['lang_abbr']
availableLanaguages['lang_abbr'][1]
availableLanaguages['lang_abbr'][2]
availableLanaguages['lang_abbr'][1]
availableLanaguages['lang_abbr',1]
availableLanaguages[1,'lang_abbr']
availableLanaguages[2,'lang_abbr']
availableLanaguages[3,'lang_abbr']
str_match(availableLanaguages[2,'lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages[3,'lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages[3,'lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages[1,'lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2},')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages[3,'lang_abbr'],'[a-z]{2}.')
str_match(availableLanaguages[3,'lang_abbr'],'[a-z]{2},')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2}')
str_match(availableLanaguages['lang_abbr'],'[a-z]{2}')
gsub('[a-z]{2}'," ",availableLanaguages$lang_abbr,value=T)
gsub('[a-z]{2}'," ", value=T)
gsub('[a-z]{2}'," ", value=TRUE)
gsub('[a-z]{2}'," ",availableLanaguages$lang_abbr,value=TRUE)
grep('[a-z]{2}'," ",availableLanaguages$lang_abbr,value=TRUE)
grep('[a-z]{2}',availableLanaguages$lang_abbr,value=TRUE)
dddddddddd<- sqldf::sqldf('SELECT * FROM availableLanaguages w, availableLanaguagesCodes b WHERE w.lang_abbr == b.alpha2')
dddddddddd<- sqldf::sqldf('SELECT * FROM availableLanaguages w, availableLanaguagesCodes b WHERE w.lang_abbr like "[a-z]{2}" == b.alpha2')
dddddddddd <- sqldf::sqldf('SELECT * FROM availableLanaguages w, availableLanaguagesCodes b WHERE w.lang_abbr == b.alpha2 || w.lang_abbr like "[a-z]{2}" ')
dddddddddd <- sqldf::sqldf('SELECT * FROM availableLanaguages w, availableLanaguagesCodes b WHERE w.lang_abbr == b.alpha2 || w.lang_abbr like "[a-z]{2}" ')
pattern <- "([[:alpha:]]+)([[:digit:]]+)"
s <- "Test: A1 BC23 DEF456"
gregexpr(pattern, s)
n
Q
library(shiny) runApp()
n
n
n
n
n
n
n
n
aa <- regmatches("en,ar,hf", gregexpr("[a-z]{2}", "en,ar,hf"))[[1]]
aa
class(aa)
as.vector(aa)
grepl("\\W", aa)
grepl("\\W", aa)
grepl("\\W", aa)[1]
if (grepl("\\W", aa)) { print("true") }
if (grepl("\\W", aa)[1]) { print("true") }
if (grepl("\\W", aa)[1]) { print("true") }
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
n
Q
library(shiny) runApp()
n
n
library(shiny) runApp()
regmatches("en", gregexpr("[a-z]{2}", "en"))[[1]]
aa <- regmatches("en", gregexpr("[a-z]{2}", "en"))[[1]]
class(aa)
is.vector(aa)
unlist("en","ar")
unlist(list("a","r"))
class(unlist(list("a","r")))
is.ve
is.vector(unlist(list("a", "r")))
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
aa <- sort(unlist(availableCountriesLanaguages$lang_fullname))
aa <- sort(unlist(availableCountriesLanaguages$lang_fullname))
library(shiny) runApp()
availableTrendLocations <- trends_available()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
my.df <- data.frame(lapply(availableTrendLocations, as.character), stringsAsFactors = FALSE)
my.df <- data.frame(lapply(availableTrendLocations, as.character), stringsAsFactors = FALSE)
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
availableTrendLocations$lang_fullname <- lapply(availableTrendLocations$lang_fullname, as.character)
availableTrendLocations$lang_fullname <- lapply(availableTrendLocations$lang_fullname, as.character)
str(availableTrendLocations)
library(shiny) runApp()
availableTrendLocations <- data.frame(lapply(availableTrendLocations, as.character), stringsAsFactors = FALSE)
availableTrendLocations <- data.frame(lapply(availableTrendLocations, as.character), stringsAsFactors = FALSE)
library(shiny) runApp()
library(shiny) runApp()
availableTrendLocations <- data.frame(lapply(availableTrendLocations, as.matrix), stringsAsFactors = FALSE)
availableTrendLocations <- data.frame(lapply(availableTrendLocations, as.matrix), stringsAsFactors = FALSE)
str(availableTrendLocations)
availableTrendLocations$lang_fullname <- sapply(availableTrendLocations$lang_fullname, unlist)
library(shiny) runApp()
availableCountriesLanaguages$lang_fullname <- sapply(availableCountriesLanaguages$lang_fullname, unlist)
availableCountriesLanaguages$lang_fullname <- sapply(availableCountriesLanaguages$lang_fullname, unlist)
availableCountriesLanaguages$lang_fullname <- sapply(availableCountriesLanaguages$lang_fullname, unlist)
str(availableCountriesLanaguages$lang_fullname)
availableTrendLocations$lang_fullname <- vapply(availableTrendLocations$lang_fullname, paste, collapse = ",", character(1L))
availableCountriesLanaguages$lang_fullname <- vapply(availableCountriesLanaguages$lang_fullname, paste, collapse = ",", character(1L))
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
availableCountriesLanaguages <- read.csv("ShapeCountries/CountriesLanguages.csv", stringsAsFactors = FALSE)
availableCountriesLanaguagesCodes <- read.csv("ShapeCountries/language-codes.csv", stringsAsFactors = FALSE)
availableTrendLocations <- trends_available()
availableTrendLocations <- trends_available()
library(rtweet)
availableCountriesLanaguagesCodes <- read.csv("ShapeCountries/language-codes.csv", stringsAsFactors = FALSE)
availableCountriesLanaguages <- read.csv("ShapeCountries/CountriesLanguages.csv", stringsAsFactors = FALSE)
availableTrendLocations <- left_join(availableTrendLocations, availableCountriesLanaguages, by = "countryCode")
LoadLibraries()
library(shiny) runApp()
str(availableTrendLocations$lang_fullname)
str(availableTrendLocations$lang_fullname)
str(availableTrendLocations$countryLanguages)
availableTrendLocations$countryLanguages <- lapply(availableTrendLocations$countryLanguages, function(countryLanguagesCell) {     if (grepl("\\W", countryLanguagesCell)) {         #langAbbrVal <- regmatches(langAbbrVal, gregexpr("[a-z]{2}", langAbbrVal))[[1]]         countryLanguagesCell <- regmatches(countryLanguagesCell, gregexpr("[a-z]{2}", countryLanguagesCell))[[1]]         return(countryLanguagesCell)     } else return(countryLanguagesCell) })
availableTrendLocations$countryLanguages <- lapply(availableTrendLocations$countryLanguages, function(countryLanguagesCell) {     if (grepl("\\W", countryLanguagesCell)) {         countryLanguagesCell <- regmatches(countryLanguagesCell, gregexpr("[a-z]", countryLanguagesCell))[[1]]         return(countryLanguagesCell)     } else return(countryLanguagesCell) })
warnings()
availableTrendLocations$countryLanguages <- lapply(availableTrendLocations$countryLanguages, function(countryLanguagesCell) {     if (grepl("\\W", countryLanguagesCell)) {         countryLanguagesCell <- regmatches(countryLanguagesCell, gregexpr("[A-za-z]+", countryLanguagesCell))[[1]]         return(countryLanguagesCell)     } else return(countryLanguagesCell) })
availableTrendLocations <- left_join(availableTrendLocations, availableCountriesLanaguages, by = "countryCode")
availableTrendLocations <- left_join(availableTrendLocations, availableCountriesLanaguages, by = "countryCode")
source("Y:/Programmes/GraduationProject/Vs/TwitteR Analysis MKH/TwitteR Analysis MKH/global.R", echo = TRUE, encoding = "windows-1256")
availableTrendLocations$countryLanguages <- lapply(availableTrendLocations$countryLanguages, function(countryLanguagesCell) {     if (grepl("\\W", countryLanguagesCell)) {         countryLanguagesCell <- regmatches(countryLanguagesCell, gregexpr("[A-za-z]+", countryLanguagesCell))[[1]]         return(countryLanguagesCell)     } else return(countryLanguagesCell)     })
library(shiny) runApp()
aa <- as.vector(c(getCountryLanguages("Egypt"), getCountriesLanguages()))
aa <- as.vector(c(getCountryLanguages("Egypt"), getCountriesLanguages()))
aa <- as.vector(c(getCountryLanguages("Worldwide"), getCountriesLanguages()))
ss <- as.vector(c(getCountryLanguages("Egypt"), getCountriesLanguages()))
ss <- c(getCountryLanguages("Egypt"), getCountriesLanguages())
aaa <- sort(unique(unlist(availableTrendLocations$countryLanguages)))
library(shiny) runApp()
aa <- c(getCountryLanguages(input$trendLocations), getCountriesLanguages())
aa <- c(getCountryLanguages(input$trendLocations), getCountriesLanguages())
aa <- c(getCountryLanguages("Egypt"), getCountriesLanguages())
aa <- as.vector(c(getCountryLanguages("Egypt"), getCountriesLanguages()))
class(aa)
class(aaa)
aa<- unlist(aa)
class(aa)
class(getCountriesLanguages())
class(getCountryLanguages(input$trendLocations))
class(getCountryLanguages("Egypt"))
class(getCountryLanguages("Egypt"))
class(getCountryLanguages("Egypt"))
languages <- availableTrendLocations[which(availableTrendLocations$country == "Egypt"),]$countryLanguages[1]
aaaaa<- unlist(languages)
class(aaaa)
class(aaaaa)
ss <- availableTrendLocations[which(availableTrendLocations$country == "Canada"),]$countryLanguages
class(ss)
class(ss[1])
s<- unlist(ss[1])
class(s)
library(shiny) runApp()
library(shiny) runApp()
devtools::install_github("mkearney/rtweet")
devtools::install_github("mkearney/rtweet")
devtools::install_github("mkearney/rtweet")
devtools::install_github("Crackz/httr")
install.packages(httr)
install.packages("httr")
devtools::install_github("Crackz/httr")
devtools::install_github("mkearney/rtweet")
lookup_coords("Egypt")
library(rtweet)
lookup_coords("Egypt")
lookup_coords("EGYPT", components = NULL, box = F)
lookup_coords("Ismailia, EG", "country:EG")
lookup_coords("Ismailia, EG", "country:EG",box=F)
lookup_coords("EGYPT", "country:EG",box=F)
View(availableLanaguages)
lookup_coords("cairo, EG", "country:EG")
lookup_coords("cairo, EG", "country:EG",box=F)
lookup_coords("cairo", "country:EG",box=F)
lookup_coords("Cairo", "country:EG",box=F)
lookup_coords("Cairo", "country:EGY",box=F)
lookup_coords("Cairo", "country:EGY",box=F)
lookup_coords("Cairo", "country:EG",box=F)
lookup_coords("Cairo", "country:EG",box=T)
library(rtweet)
lookup_coords("Ismailia", "country:EG",box=T)
lookup_coords("Ismailia", "country:EG",box=F)
sessionInfo()
packageVersion("shiny")
getRversion()
packageDescription(rtweet)
packageDescription(shiny)
packageDescription("shiny")
library(shiny) runApp()
library(shiny) runApp()
getCountriesLanguages <- function() {     return(c("English", sort(unique(unlist(availableTrendLocations$countryLanguages))))) }
getCountriesLanguages <- function() {     return(c("English", sort() %>% unique() %>% unlist(availableTrendLocations$countryLanguages))) } getC
getCountriesLanguages <- function() {     return(c("English", sort() %>% unique() %>% unlist(availableTrendLocations$countryLanguages))) }
getCoun
source("Y:/Programmes/GraduationProject/Vs/TwitteR Analysis MKH/TwitteR Analysis MKH/global.R", encoding = "windows-1256")
getCountriesLanguages()
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", getRateLimitFor(queryRateLimit)$reset)     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits("trends/place")
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", ceiling(getRateLimitFor(queryRateLimit)$reset))     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits("trends/place")
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", floor(getRateLimitFor(queryRateLimit)$reset))     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", floor(getRateLimitFor(queryRateLimit)$reset))     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits("trends/place")
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", round(getRateLimitFor(queryRateLimit)$reset, 2))     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits("trends/place")
exceedsTwitterLimits <- function(queryRateLimit) {     textLimitReach <- paste0(queryRateLimit, " Exceeds Limit..Reset In : ", round(getRateLimitFor(queryRateLimit)$reset, 2), " Minutes")     print(textLimitReach)     return(textLimitReach) }
exceedsTwitterLimits("trends/place")
library(shiny) runApp()
library(shiny) runApp()
selectedLang <- subset(availableCountriesLanaguagesCodes, lang_fullname == "Arabic")[["lang_abbr"]]
selectedLang <- subset(availableCountriesLanaguagesCodes, lang_fullname == "Arabic")[["lang_abbr"]]
selectedLang
library(shiny) runApp()
install.packages("shinyjs")
install.packages("shinyjs")
packageVersion(shinyjs)
packageVersion("shinyjs")
install.packages("shinyjs")
packageVersion("shinyjs")
library(shiny) runApp()
library(shiny) runApp()
n
n
sessio
n
library(shiny) runApp()
Q
n
n
library(shiny) runApp()
n
Q
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
source("Y:/Programmes/GraduationProject/Vs/TwitteR Analysis MKH/TwitteR Analysis MKH/server/tab1_MiningTweets_Server.R", echo = TRUE, encoding = "windows-1256")
library(shiny) runApp()
aa <- list("MostUsed" = countryLanguages, "Others" = getCountriesLanguages())
aa <- list("MostUsed" = countryLanguages, "Others" = getCountriesLanguages())
countryLanguages <- getCountryLanguages("Egypt")
aa <- list("MostUsed" = countryLanguages, "Others" = getCountriesLanguages())
aa <- list("MostUsed" = countryLanguages, "Others" = getCountriesLanguages())
names(aa)
aa["MostUsed"]
aa["MostUsed"][1]
is.vector(aa["MostUsed"][1])
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
packageVersion(shiny)
packageVersion(shiny)
packageVersion("shiny")
library(shiny) runApp()
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny")
install.packages(htmltools)
install.packages("htmltools")
devtools::install_github("rstudio/shiny")
packageVersion("shiny")
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
countryLanguages <- getCountryLanguages("Egypt")
countryLanguages <- getCountryLanguages("Egypt")
CountriesLanguages
CountriesLanguages[1]
CountriesLanguages[2]
getCountryLanguages("Egypt")
library(shiny) runApp()
is.vector(countryLanguages)
is.vector(countryLanguages)
countryLanguages
class(countr)
class(CountriesLanguages)
class(countryLanguages)
class(c("arabic","english"))
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
library(shiny) runApp()
setdiff(getCountriesLanguages(), countryLanguages)
class(setdiff(getCountriesLanguages(), countryLanguages))
setdiff(getCountriesLanguages(), countryLanguages)
library(shiny) runApp()
choices <- list("Most Used" = countryLanguages, "Others" = setdiff(getCountriesLanguages(), countryLanguages))
choices <- list("Most Used" = countryLanguages, "Others" = setdiff(getCountriesLanguages(), countryLanguages))
choices[1]
library(shiny) runApp()
choices[[1]]
choices[[1]]
library(shiny) runApp()
countryLanguages <- c("", getCountryLanguages("Israel"))
countryLanguages <- c("", getCountryLanguages("Israel"))
choices <- list("Most Used" = countryLanguages, "Others" = setdiff(getCountriesLanguages(), countryLanguages))
choices[1]
library(shiny) runApp()
library(shiny) runApp()
